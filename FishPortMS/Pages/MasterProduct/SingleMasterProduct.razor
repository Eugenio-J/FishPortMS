@using System.Net.Http.Headers
@inject IClientMasterProductService ClientMasterProductService
@inject ISnackbar Snackbar

    @if (loadingProgress)
    {
        <TableSkeletonLoading/>
    }
    else
    {
        <MudDialog>
            <DialogContent>

                <MudPaper Class="px-sm-2 mt-n4 px-1 pb-4" Elevation="0">

                @if(Id == null)
                {
                    <HeaderInfos title="ADD PRODUCT" icon="@Icons.Material.Filled.Add" />
                }
                else
                {
                    <HeaderInfos title="EDIT PRODUCT" icon="@Icons.Material.Filled.Edit" />
                }

                <div class="mt-3">
                    <EditForm Model="createMasterProduct" OnValidSubmit="() => HandleSubmit()">
                        <DataAnnotationsValidator />

                        <div class="mb-8">
                            @{
                                var title = Id == null ? "UPLOAD FILE" : "RE-UPLOAD FILE";
                            }
                            <ListFileUpload imgs="imgs" OnFilesSelected="HandleFilesSelected" title="@title" isActive="true" />
                        </div>
     
                        <MudTextField 
                            Class="mb-5"
                            Label="Product Name" @bind-Value="createMasterProduct.Name"
                            For="@(() => createMasterProduct.Name)"
                            InputType="InputType.Text" 
                            Variant="Variant.Outlined"
                            Margin="Margin.Dense" 
                            Required="true" 
                        />

                        <MudTextField 
                            Class="mb-5" 
                            Label="Description﹙optional﹚"
                            Lines="5" @bind-Value="createMasterProduct.Description"
                            For="@(() => createMasterProduct.Description)"
                             InputType="InputType.Text" 
                            Variant="Variant.Outlined"
                            Margin="Margin.Dense" 
                        />

                        <MudTextField 
                            Class="mb-5" 
                            Label="SKU" @bind-Value="createMasterProduct.SKU"
                            For="@(() => createMasterProduct.SKU)"
                            InputType="InputType.Text" 
                            Variant="Variant.Outlined"
                            Margin="Margin.Dense" 
                            Required="true"
                        />

                        <MudSelect 
                            Class="mb-4"
                            Margin="Margin.Dense"
                            AnchorOrigin="Origin.BottomCenter" 
                            Label="UOM"
                            Required
                            Variant="Variant.Outlined"
                            @bind-Value="createMasterProduct.UOM">
                            <MudSelectItem T="string" Value="@("CONTAINER")" />
                            <MudSelectItem T="string" Value="@("G")" />
                            <MudSelectItem T="string" Value="@("GAL")" />
                            <MudSelectItem T="string" Value="@("KG")" />
                            <MudSelectItem T="string" Value="@("PACK")" />
                            <MudSelectItem T="string" Value="@("PC")" />
                            <MudSelectItem T="string" Value="@("PCS")" />
                            <MudSelectItem T="string" Value="@("SET")" />
                        </MudSelect>

                        <div class="d-lg-flex d-md-flex d-sm-block justify-space-between gap-3">
                            <div class="col mb-5">
                                <MudTextField 
                                    Label="Packaging Qty" @bind-Value="createMasterProduct.PkgQnty"
                                    For="@(() => createMasterProduct.PkgQnty)"
                                    InputType="InputType.Number" Step="0.01" 
                                    Variant="Variant.Outlined" 
                                    Margin="Margin.Dense" 
                                    equired="true" 
                                />
                            </div>

                            <div class="col mb-5">
                                <MudTextField Label="Packaging Cost" @bind-Value="createMasterProduct.PkgCost"
                                    For="@(() => createMasterProduct.PkgCost)" 
                                    InputType="InputType.Number" 
                                    Step="0.01" 
                                    Variant="Variant.Outlined" 
                                    Margin="Margin.Dense" 
                                    Required="true" />
                            </div>
                        </div>

                        <div class="d-flex justify-content-end">
                            @if (Id == null)
                            {
                                <SubmitButton isLoading="isLoading" button_name="SUBMIT" className="submit-btn" />
                            }
                            else
                            {
                                <SubmitButton isLoading="isLoading" button_name="EDIT" className="edit-btn" />
                            }
                        </div>
                    </EditForm>
                </div>
                </MudPaper>
            </DialogContent>
        </MudDialog>
    }


@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();

    [Parameter] public int? Id { get; set; }

    [Parameter] public GetMasterProduct? singleProduct { get; set; } = new GetMasterProduct();

    [Parameter] public CreateMasterProduct? createMasterProduct { get; set; } = new CreateMasterProduct();

    private MultipartFormDataContent content = new MultipartFormDataContent();
    private List<IBrowserFile> files = new List<IBrowserFile>();
    private long maxFileSize = 1024 * 1024 * 5;
    private List<string> imgs = new List<string>();

    private bool loadingProgress = true;

    public bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        loadingProgress = true;
        if (Id == null)
        {
            singleProduct = new GetMasterProduct();
        }
        else
        {
            singleProduct = await ClientMasterProductService.GetSingleMasterProduct((int)Id);

            if (singleProduct != null)
            {
                createMasterProduct = new CreateMasterProduct
                {
                    Name = singleProduct.Name,
                    Description = singleProduct.Description,
                    SKU = singleProduct.SKU,
                    UOM = singleProduct.UOM,
                    PkgQnty = singleProduct.PkgQnty,
                    PkgCost = singleProduct.PkgCost
                };

                foreach (var image in singleProduct.ProductImageURLs)
                {
                    imgs.Add(image.ProductImageURL);
                }
            }
            
        }
        loadingProgress = false;
    }

    void HandleSubmit()
    {
        isLoading = true;
        MudDialog.Close(DialogResult.Ok(createMasterProduct));
        isLoading = false;
    }

    private void TransferImageToMultiContentForm()
    {
        foreach (IBrowserFile file in files)
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            content.Add(
                  content: fileContent,
                  name: "\"files\"",
                  fileName: file.Name);
        }
    }

    private bool isImageValid(IBrowserFile file)
    {
        if (
            file.ContentType != "image/jpeg"
            && file.ContentType != "image/png"
            && file.ContentType != "image/jpg"
        )
        {
            Snackbar.Add(
                "Please upload a valid image.",
                Severity.Error,
                config =>
                {
                    config.ShowTransitionDuration = 200;
                    config.HideTransitionDuration = 400;
                    config.VisibleStateDuration = 2500;
                });

            return false;
        }

        if (file.Size > maxFileSize)
        {
            Snackbar.Add(
                 "The uploaded image is too large.",
                 Severity.Error,
                 config =>
                 {
                     config.ShowTransitionDuration = 200;
                     config.HideTransitionDuration = 400;
                     config.VisibleStateDuration = 2500;
                 });

            return false;
        }

        return true;
    }

    private void HandleFilesSelected(IReadOnlyList<IBrowserFile> selectedFiles)
    {
        files.Clear();
        foreach (var img in selectedFiles)
        {
            files.Add(img);
        }
    }

}
