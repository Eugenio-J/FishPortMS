@using System.Net.Http.Headers
@inject IClientVendorExpenseService ClientVendorExpenseService
@inject ModifiedSnackBar ModifiedSnackBar

@if (loadingProgress)
{
    <TableSkeletonLoading />
}
else
{
    <MudDialog>
        <DialogContent>

            <MudPaper Class="px-sm-2 mt-n4 px-1 pb-4" Elevation="0">

                @if (Id == null)
                {
                    <HeaderInfos title="ADD EXPENSE" icon="@Icons.Material.Filled.Add" />
                }
                else
                {
                    <HeaderInfos title="EDIT EXPENSE" icon="@Icons.Material.Filled.Edit" />
                }

                <div class="mt-3">
                    <EditForm Model="UpdateVendorExp" OnValidSubmit="() => HandleSubmit()">
                        <DataAnnotationsValidator />

                        <MudTextField Class="mr-1 mb-3"
                                      @bind-Value="UpdateVendorExp.Amount"
                                      InputType="InputType.Number"
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense"
                                      Required />

                        <MudSelect Class="mr-1 mb-5" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="UpdateVendorExp.VendorExpenseCategoryId" ReadOnly>
                            @foreach (var exp in ExpenseCategories)
                            {
                                <MudSelectItem Value="@exp.Id">@exp.Title</MudSelectItem>
                            }
                        </MudSelect>


                        <div class="d-flex justify-content-end">
                            @if (Id == null)
                            {
                                <SubmitButton isLoading="isLoading" button_name="SUBMIT" className="submit-btn" />
                            }
                            else
                            {
                                <SubmitButton isLoading="isLoading" button_name="EDIT" className="edit-btn" />
                            }
                        </div>
                    </EditForm>
                </div>
            </MudPaper>
        </DialogContent>
    </MudDialog>
}


@code {

    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }

    [Parameter] public int? Id { get; set; }

    [Parameter] public GetVendorExp? singleExpense { get; set; } = new GetVendorExp();

    [Parameter] public List<GetExpenseCategory> ExpenseCategories { get; set; }

    [Parameter] public CreateReceiptDTO CreateReceipt { get; set; }

    [Parameter] public Dictionary<int, string> categoryName { get; set; } = new Dictionary<int, string>();

    public UpdateVendorExp UpdateVendorExp { get; set; } = new UpdateVendorExp();

    private bool loadingProgress = true;

    public bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        loadingProgress = true;
        if (Id == null)
        {
            singleExpense = new GetVendorExp();
        }
        else
        {
            UpdateVendorExp = new UpdateVendorExp
            {
                ExpenseId = singleExpense.Id,
                Amount = singleExpense.Amount,
                VendorExpenseCategoryId = singleExpense.VendorExpenseCategoryId
            };

        }
        loadingProgress = false;
    }

    void HandleSubmit()
    {
        if (UpdateVendorExp.Amount <= 0)
        {
            ModifiedSnackBar.ShowMessage("Invalid Amount", Severity.Warning);
            return;
        }

        isLoading = true;
        MudDialog.Close(DialogResult.Ok(UpdateVendorExp));
        isLoading = false;
    }

}
