@page "/reset-password/{email}"
@using System.Security.Claims;
@inject IClientAccountService ClientAccountService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JavaScript
@inject NavigationManager NavigationManager
@inject ModifiedSnackBar ModifiedSnackBar
@layout AuthMainLayout

<style>
    .mud-main-content {
        height: 100vh !important;
    }

    .mud-container {
        height: 100% !important;
    }

    .mud-input.mud-input-outlined.mud-input-adorned-end {
        font-size: 13px !important;
    }
</style>

<div class="container">
    <div class="right-panel position-relative">
        <div class="d-flex flex-column align-items-center mb-3">
            <img src="images/sys_imgs/jomar_logo.jpg" class="logo" />
            <h2 class="">Create new Password</h2>
        </div>
        <form @onsubmit="ForgotPass">
            <label for="confirmpass" class="d-flex">New Password <span class="ml-1" style="color: #FF4F53;">*</span></label>
            <MudTextField @bind-Value="ForgotPasswordDTO.NewPassword"
                          For="@(() => ForgotPasswordDTO.NewPassword)"
                          Placeholder="******"
                          Variant="Variant.Outlined"
                          InputType="@PasswordInput"
                          Margin="Margin.Dense"
                          Adornment="Adornment.End"
                          Class="w-100 mb-5"
                          Style="margin-top: -3px;"
                          AdornmentIcon="@PasswordInputIcon"
                          OnAdornmentClick="ShowPassword" />

            <label for="confirmpass" class="d-flex">Confirm Password <span class="ml-1" style="color: #FF4F53;">*</span></label>
            <MudTextField @bind-Value="ForgotPasswordDTO.ConfirmPassword"
                          For="@(() => ForgotPasswordDTO.ConfirmPassword)"
                          Placeholder="******"
                          Variant="Variant.Outlined"
                          InputType="@ConfirmPasswordInput"
                          Margin="Margin.Dense"
                          Adornment="Adornment.End"
                          Class="w-100 mb-5"
                          Style="margin-top: -3px;"
                          AdornmentIcon="@ConfirmPasswordInputIcon"
                          OnAdornmentClick="ShowConfirmPassword" />

            <label for="confirmpass" class="d-flex">Verification Code<span class="ml-1" style="color: #FF4F53;">*</span></label>
            <MudTextField @bind-Value="ForgotPasswordDTO.Code"
                          For="@(() => ForgotPasswordDTO.Code)"
                          Variant="Variant.Outlined"
                          InputType="InputType.Text"
                          Margin="Margin.Dense"
                          Adornment="Adornment.End"
                          Class="w-100 mb-5"
                          Style="margin-top: -3px;" />
            <button type="submit">Change Password</button>

            <div class="options">
                <div></div>
                <a href="/login">Back To Login</a>
            </div>
        </form>
    </div>
</div>


@code {

    [Parameter] public string? email { get; set; }

    private EmailVerificationDTO emailVerification = new EmailVerificationDTO();
    private ForgotPasswordDTO ForgotPasswordDTO = new ForgotPasswordDTO();

    private bool visibleForgotPass { get; set; } = false;
    private bool visibleVerification { get; set; } = true;

    private string Email;

    private DialogOptions dialogOptionsForgetPass = new() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };

    public bool Label_CheckBox2 { get; set; } = false;

    private bool isLoading = false;

    public string Password { get; set; } = string.Empty;

    public GetBranchNameId? selectedBranch { get; set; }

    //PASS SHOW
    bool isShow = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    //CONFIRM PASS SHOW
    bool isConfirmShow = false;
    InputType ConfirmPasswordInput = InputType.Password;
    string ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(email)) 
        {
            NavigationManager.NavigateTo("invalid-request");
        }

        ForgotPasswordDTO.Email = email;
    }

    private async void SendVerification()
    {
        isLoading = true;
        var response = await ClientAccountService.SendVerification(emailVerification, Email);
        visibleVerification = false;
        isLoading = true;
        StateHasChanged();
    }

    private async void ForgotPass()
    {
        isLoading = true;
        var response = await ClientAccountService.ForgotPass(ForgotPasswordDTO);
        visibleVerification = false;
        isLoading = true;
        StateHasChanged();
    }

    void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    void ShowConfirmPassword()
    {
        @if (isConfirmShow)
        {
            isConfirmShow = false;
            ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            ConfirmPasswordInput = InputType.Password;
        }
        else
        {
            isConfirmShow = true;
            ConfirmPasswordInputIcon = Icons.Material.Filled.Visibility;
            ConfirmPasswordInput = InputType.Text;
        }
    }
}