@page "/login"
@using System.Security.Claims;

@inject IClientAccountService ClientAccountService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JavaScript
@inject NavigationManager NavigationManager
@inject ModifiedSnackBar ModifiedSnackBar
@layout AuthMainLayout

<style>
    .mud-main-content {
        height: 100vh !important;
    }

    .mud-container {
        height: 100% !important;
    }

    .mud-input.mud-input-outlined.mud-input-adorned-end {
        font-size: 13px !important;
    }
</style>

<div class="container">
    <div class="right-panel position-relative">
        <div class="d-flex flex-column align-items-center mb-3">
            <img src="images/sys_imgs/jomar_logo.jpg" class="logo" />
            <h2 class="mb-2">Log In</h2>
            <p class="text-center">Enter your details to login.</p>
        </div>
        <form @onsubmit="LoginAcc">
            <label for="email" class="d-flex">Email <label class="ml-1" style="color: #FF4F53;">*</label></label>
            <input type="email" id="email" name="email" placeholder="example@email.com" @bind-value="loginDTO.Email" required>

            <label for="password" class="d-flex">Password <label class="ml-1" style="color: #FF4F53;">*</label></label>
            <MudTextField 
                @bind-Value="loginDTO.Password"
                Placeholder="******"
                Variant="Variant.Outlined"
                InputType="@PasswordInput"
                Margin="Margin.Dense"
                Adornment="Adornment.End"
                Class="w-100 mb-5"
                Style="margin-top: -3px;"
                AdornmentIcon="@PasswordInputIcon"
                OnAdornmentClick="ShowPassword" />

            <div class="options">
                <div class="d-flex align-items-center">
                    <input type="checkbox" id="remember" name="remember">
                    <label for="remember" class="ml-2" style="margin-bottom: 0px;">Remember me</label>
                </div>
                <a @onclick="ForgotPassword">Forgot password?</a>
            </div>

            <button type="submit">Sign In</button>
        </form>
    </div>
</div>

<MudDialog Visible="visibleForgotPass" Class="no-dialog" Options="dialogOptionsForgetPass">
    <DialogContent>
        <CForgotPassword />
    </DialogContent>
</MudDialog>

<div class="background" />

@code {

    private LoginDTO loginDTO = new LoginDTO();

    private bool visibleForgotPass;

    private DialogOptions dialogOptionsForgetPass = new() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };

    public bool Label_CheckBox2 { get; set; } = false;

    private bool isLoading = false;

    public string Password { get; set; } = string.Empty;

    public GetBranchNameId? selectedBranch { get; set; }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async void LoginAcc()
    {
        isLoading = true;

        var response = await ClientAccountService.LoginAsync(loginDTO);

        if (response == "success")
        {
            var auth_state = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = auth_state.User;
            var roleClaim = user.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.Role);
            var role = roleClaim?.Value;

            isLoading = false;

            if (role == Roles.SUPERUSER.ToString()
                || role == Roles.ADMIN.ToString()
                || role == Roles.ADMIN_ASST.ToString()
                || role == Roles.CONSIGNACION_OWNER.ToString())
            {
                isLoading = false;
                StateHasChanged();
                NavigationManager.NavigateTo("/dashboard");
            }
            else if (role == Roles.CASHIER.ToString() || role == Roles.BUY_AND_SELL.ToString())
            {
                NavigationManager.NavigateTo("/employee-home");
            }
        }
        else
        {
            isLoading = false;
            StateHasChanged();
            ModifiedSnackBar.ShowMessage("Invalid Credentials.", Severity.Warning);
            return;
        }
    }


    void ForgotPassword()
    {
        NavigationManager.NavigateTo("/forgot-password");
    }

    void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}

