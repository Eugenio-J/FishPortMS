@page "/forgot-password"
@using System.Security.Claims;
@using FishPortMS.Services.StorageService

@inject IClientAccountService ClientAccountService
@inject IStorageService StorageService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JavaScript
@inject NavigationManager NavigationManager
@inject ModifiedSnackBar ModifiedSnackBar
@layout AuthMainLayout

<style>
    .mud-main-content {
        height: 100vh !important;
    }

    .mud-container {
        height: 100% !important;
    }

    .mud-input.mud-input-outlined.mud-input-adorned-end {
        font-size: 13px !important;
    }

    .send-button {
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 7px;
        background-color: #3362a7;
        color: white;
        font-size: 13px;
        cursor: pointer;
        letter-spacing: .5px;
        text-transform: uppercase;
        transition: .3s ease;
        font-weight: 400;
    }

    .send-button:hover {
        transform: scale(1.01);
        background-color: #12305c;
    }
</style>

    <div class="container">
        <div class="right-panel position-relative">
            <div class="d-flex flex-column align-items-center mb-3">
                <img src="images/sys_imgs/jomar_logo.jpg" class="logo" />
                <h2 class="">Forgot your Password?</h2>
            </div>
            <form @onsubmit="SendVerification">
                <label for="email" class="d-flex">Email <label class="ml-1" style="color: #FF4F53;">*</label></label>
                <input type="email" id="email" name="email" placeholder="example@email.com" @bind-value="Email" required>
@*                 <button type="submit">Send Verification</button>
            *@  <SubmitButton className="send-button" button_name="SEND VERIFICATION" isLoading="@isLoading" />
                <div class="options">
                    @if (isCooldown)
                    {
                        <a>@buttonText</a>
                    }
                    else
                    {
                        <div></div>
                    }
                    <a href="/login">Back To Login</a>
                </div>
            </form>
        </div>
    </div>

<div class="background" />

@code {

    private EmailVerificationDTO emailVerification = new EmailVerificationDTO();
    private ForgotPasswordDTO ForgotPasswordDTO = new ForgotPasswordDTO();

    private bool visibleForgotPass { get; set; } = false;
    private bool visibleVerification { get; set; } = true;

    public string Email { get; set; }

    private DialogOptions dialogOptionsForgetPass = new() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };

    public bool Label_CheckBox2 { get; set; } = false;

    private bool isLoading = false;

    public string Password { get; set; } = string.Empty;

    public GetBranchNameId? selectedBranch { get; set; }

    //PASS SHOW
    bool isShow = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    //CONFIRM PASS SHOW
    bool isConfirmShow = false;
    InputType ConfirmPasswordInput = InputType.Password;
    string ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private bool isCooldown = false;
    private string buttonText = "Send Verification";
    private int cooldownSeconds = 30;
    private System.Timers.Timer? timer;


    protected override async Task OnInitializedAsync()
    {
        DateTime? cooldownEnd = await StorageService.GetFromLocal<DateTime>(LookupKey.VERIFICATION_TIMER);
        int remainingSeconds = 0;
        if (cooldownEnd != null)
        {
            remainingSeconds = (int)(cooldownEnd.Value - DateTime.UtcNow).TotalSeconds;
            if (remainingSeconds > 0)
            {
                await StartCooldown(remainingSeconds);
            }
            else
            {
                await StorageService.RemoveFromLocal(LookupKey.VERIFICATION_TIMER);
            }
        }
    }
    private async void SendVerification()
    {
        isLoading = true;
        var response = await ClientAccountService.SendVerification(emailVerification, Email);
        // ✅ Start the UI countdown
        if (response == 1)
        {
            isLoading = false;
            NavigationManager.NavigateTo($"reset-password/{Email}");
        }
        else
        {
            var endTime = DateTime.UtcNow.AddSeconds(cooldownSeconds);
            await StorageService.SaveToLocal(LookupKey.VERIFICATION_TIMER, endTime);
            await StartCooldown(cooldownSeconds);
        }
        isLoading = false;

        StateHasChanged();
    }

    private async void ForgotPass()
    {
        isLoading = true;
        var response = await ClientAccountService.ForgotPass(ForgotPasswordDTO);
        visibleVerification = false;
        isLoading = true;
        StateHasChanged();
    }

    void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    void ShowConfirmPassword()
    {
        @if (isConfirmShow)
        {
            isConfirmShow = false;
            ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            ConfirmPasswordInput = InputType.Password;
        }
        else
        {
            isConfirmShow = true;
            ConfirmPasswordInputIcon = Icons.Material.Filled.Visibility;
            ConfirmPasswordInput = InputType.Text;
        }
    }

    private async Task StartCooldown(int remaining)
    {
        isLoading = true;
        isCooldown = true;

        for (int i = remaining; i > 0; i--)
        {
            buttonText = $"Resend in {i}s";
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1000);
        }

        isLoading = false;
        isCooldown = false;
        buttonText = "Send Verification";
        await StorageService.RemoveFromLocal(LookupKey.VERIFICATION_TIMER);
    }

    // Cleanup timer on dispose
    public void Dispose()
    {
        timer?.Dispose();
    }
}

