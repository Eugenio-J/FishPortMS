@page "/employee-home"
@using System.Security.Claims
@inject IClientAccountService ClientAccountService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JavaScript

    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
        <div class="d-flex justify-content-center mt-5 mb-10">
         <MudImage Src="images/sys_imgs/jomar_logo.png" ObjectFit="ObjectFit.Fill" Alt="maxmango_logo"/>
        </div>
        <MudText Typo="Typo.h4" Class="d-flex justify-content-center" Style="word-wrap: break-word">Hello, @email</MudText>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
        <div class="d-flex justify-content-center mt-5 mb-10">
            <MudImage Src="images/sys_imgs/jomar_logo.png" ObjectFit="ObjectFit.Fill" Alt="maxmango_logo" />
        </div>
        <MudText Typo="Typo.h5" Class="d-flex justify-content-center text-center">Hello, @email</MudText>
    </MudHidden>

@code {


    private List<GetConsignacionDTO> myBranches = new List<GetConsignacionDTO>();

    private string? email = string.Empty;

    // private EmployeeNavigation? Link;

    private bool runningLowPopUP = true;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState token_auth_state = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = token_auth_state.User;
        email = user.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.Email)?.Value;
    }

    private void unrenderLowStock()
    {
        runningLowPopUP = false;
    }

   

    private async Task Logout()
    {
        string response = await ClientAccountService.Logout();
        if (response == "success")
        {
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/login");
        }
    }
}
