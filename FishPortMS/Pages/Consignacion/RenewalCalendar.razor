@page "/calendar"
@inject IClientConsignacionService ClientConsignacionService
@inject IDialogService DialogService
@attribute [Authorize]

<style>
    .br-div .mud-drawer {
        background: transparent !important;
    }

    .br-div .mud-drawer.mud-drawer-temporary.mud-drawer-pos-right.mud-drawer--open:not(.mud-drawer--initial) {
        width: 450px !important;
        border: 0px !important;
        background: rgba(255, 255, 255, 0.85) !important;
        backdrop-filter: blur(3.9px);
        -webkit-backdrop-filter: blur(3.9px);
        border-top-left-radius: 12px;
        border-bottom-left-radius: 12px;
    }

    @@media only screen and (max-width: 600px) {
        .br-div .mud-drawer.mud-drawer-temporary.mud-drawer-pos-right.mud-drawer--open:not(.mud-drawer--initial) {
            width: 100% !important;
        }
    }

    @@media only screen and (max-width: 355px) {
        .br-div .mud-drawer.mud-drawer-temporary.mud-drawer-pos-right.mud-drawer--open:not(.mud-drawer--initial) {
            width: 100% !important;
        }
    }
</style>

<div Class="pt-8 px-5" style="margin-bottom: 50px;">

    <div class="calendar-container">
        <MudText Typo="Typo.h4">BRANCHES</MudText><MudBreadcrumbs Items="_items" Class="ml-n2"></MudBreadcrumbs>
        
        <div class="calendar-div position-relative mt-6">

            <div class="d-flex justify-content-sm-center pl-5">
                <div @onclick="PreviousMonth" style="width: 20px; text-align: center; cursor: pointer;">
                    <i class="fa-solid fa-chevron-left arrow-ico"  />
                </div>
                <div class="d-flex flex-column mx-sm-10 mx-5">
                    <span class="curr-month-text">@currentMonth.ToString("MMMM")</span>
                    <span class="curr-year-text">@currentMonth.ToString("yyyy")</span>
                </div>
                <div @onclick="NextMonth" style="width: 20px; text-align: center; cursor: pointer;">
                    <i class="fa-solid fa-chevron-right arrow-ico"/>
                </div>
            </div>

            <div class="position-absolute" style="top: 25px; right: 20px;">
                <span class="date-filter-btn">
                    <MudTooltip Arrow Text="Date Filter">
                        <i class="fi fi-tr-calendar-days" @onclick="OpenDatePicker"></i>
                    </MudTooltip>
                    <MudTooltip Arrow Text="Remove Filter">
                        <i class="fi fi-rr-cross-small ml-2" @onclick="ClearPicker"></i>
                    </MudTooltip>
                </span>
            </div>

            <div class="position-absolute" style="top: 50px; right: 0; width: 20%;">
                <MudDatePicker @ref="datePicker" 
                    Class="month-filter" 
                    Style="width: 20%; opacity: 0;" 
                    @bind-Date="_yearMonth" 
                    Clearable="true"
                    PickerVariant="PickerVariant.Dialog" 
                    OpenTo="OpenTo.Year"
                    FixDay="1" 
                    DateFormat="yyyy/MM" />
            </div>

            <div class="calendar mt-7">
                <div class="days">
                    @foreach (var day in DaysOfWeek)
                    {
                        <div class="day-name">@day</div>
                    }
                    @foreach (var day in DaysInMonth)
                    {
                        <div class="day-number @(day.IsCurrentMonth ? "" : "other-month")">
                            <div class="d-flex flex-column">
                                @day.Date.Day
                                @foreach (var renewalDetail in RenewalDetails.Where(rd => rd.EndOfContract.HasValue && rd.EndOfContract.Value.Date == day.Date.Date))
                                {
                                    <span class="contract-mark" @onclick="() => OpenConsignacionDetails(renewalDetail)">@renewalDetail.ConsignacionName</span>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

</div>

<div class="br-div">
    <MudDrawer @bind-Open="@openConsignacionDetails" Anchor="Anchor.End" Variant="@DrawerVariant.Temporary">
        <ConsignacionDetailsRightSidebar OnClose="CloseDrawer" GetConsignacion="selectedConsignacion" />
    </MudDrawer>
</div>

@code {
    private DateTime currentMonth;
    private DateTime? _yearMonth;
    bool openConsignacionDetails = false;
    private List<GetConsignacionDTO> RenewalDetails = new List<GetConsignacionDTO>();
    private MudDatePicker datePicker;
    private GetConsignacionDTO? selectedConsignacion = new GetConsignacionDTO();

    private static readonly string[] DaysOfWeek = new[] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Consignaciones", href: "/", disabled: true),
        new BreadcrumbItem("Renewal Calendar", href: "/calendar"),
    };

    protected override async Task OnInitializedAsync()
    {
        currentMonth = PHTime(DateTime.UtcNow);
        _yearMonth = currentMonth;
        await LoadRenewalDetails();
    }

    private async Task LoadRenewalDetails()
    {
        RenewalDetails = await ClientConsignacionService.GetRenewalDetails(currentMonth);
    }

    void OpenConsignacionDetails(GetConsignacionDTO branch)
    {
        selectedConsignacion = branch;
        openConsignacionDetails = true;
    }

    void CloseDrawer()
    {
        openConsignacionDetails = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_yearMonth.HasValue && (_yearMonth.Value.Year != currentMonth.Year || _yearMonth.Value.Month != currentMonth.Month))
        {
            currentMonth = new DateTime(_yearMonth.Value.Year, _yearMonth.Value.Month, 1);
            await LoadRenewalDetails();
            StateHasChanged();
        }
    }

    private async Task NextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
        _yearMonth = currentMonth;
        await LoadRenewalDetails();
    }

    private async Task PreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
        _yearMonth = currentMonth;
        await LoadRenewalDetails();
    }

    private void OpenDatePicker()
    {
        datePicker.Open();
    }

    private async Task ClearPicker()
    {
        currentMonth = PHTime(DateTime.UtcNow);
        _yearMonth = currentMonth;
        await LoadRenewalDetails();
    }

    private IEnumerable<(DateTime Date, bool IsCurrentMonth)> DaysInMonth
    {
        get
        {
            var firstDayOfMonth = new DateTime(currentMonth.Year, currentMonth.Month, 1);
            var daysInMonth = DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month);
            var firstDayOfWeek = (int)firstDayOfMonth.DayOfWeek;

            var days = new List<(DateTime Date, bool IsCurrentMonth)>();

            // Add days from the previous month
            for (int i = firstDayOfWeek - 1; i >= 0; i--)
            {
                var date = firstDayOfMonth.AddDays(-i - 1);
                days.Add((date, false));
            }

            // Add days of the current month
            for (int i = 0; i < daysInMonth; i++)
            {
                var date = firstDayOfMonth.AddDays(i);
                days.Add((date, true));
            }

            // Add days from the next month to fill the last week
            var remainingDays = 7 - (days.Count % 7);
            for (int i = 0; i < remainingDays; i++)
            {
                var date = firstDayOfMonth.AddDays(daysInMonth + i);
                days.Add((date, false));
            }

            return days;
        }
    }

    private async void OpenUserDetailDialog(Guid UserID, string ConsignacionName)
    {
        // var options = new DialogOptions
        //     {
        //         MaxWidth = MaxWidth.Small,
        //         FullWidth = true,
        //         CloseOnEscapeKey = true,
        //         CloseButton = true
        //     };

        // var parameters = new DialogParameters();
        // parameters.Add("UserID", UserID);
        // parameters.Add("ConsignacionName", ConsignacionName);

        // var dialogResult = await DialogService.ShowAsync<UserDetailDialog>("", parameters, options);
    }

    private DateTime PHTime(DateTime date)
    {
        TimeZoneInfo tz = TimeZoneInfo.FindSystemTimeZoneById("Asia/Manila");
        DateTime utcDate = new DateTime(date.Year, date.Month, 1, 0, 0, 0, DateTimeKind.Utc);
        DateTime philippineTime = TimeZoneInfo.ConvertTimeFromUtc(utcDate, tz);
        return philippineTime;
    }
}

