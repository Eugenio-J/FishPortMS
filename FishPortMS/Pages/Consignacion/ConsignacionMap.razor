@page "/branch-map"
@inject IClientConsignacionService ClientConsignacionService
@inject IJSRuntime JSRuntime

<style>
    #map {
        height: 695px;
        width: 100%;
        border-radius: 10px;
        z-index: 2;
        background: #F5F5FB;
        border: 1px solid #a4a4a4 !important;
    }
</style>

<div Class="pa-5 mt-3" style="background: #F5F5FB;">

    <MudText Typo="Typo.h4">BRANCHES</MudText>
    <div class="d-lg-flex d-sm-block mb-5 justify-space-between align-start">
        <MudBreadcrumbs Items="_items" Class="ml-n2"></MudBreadcrumbs>
    </div>

    <div id="map"></div>
</div>

@code {

    private List<GetConsignacionPin> branchPins = new List<GetConsignacionPin>();

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Consignaciones", href: "#", disabled: true),
        new BreadcrumbItem("Map", href: "/branch-map"),
    };

    protected override async Task OnInitializedAsync()
    {
        branchPins = await ClientConsignacionService.GetAllConsignacionPin();
        await CreateAndInitializeMap();
    }

    private async Task CreateAndInitializeMap()
    {
        var features = branchPins.Select(branch => new
        {
            type = "Feature",
            geometry = new
            {
                type = "Point",
                coordinates = new[] { branch.longitude, branch.Latitude }
            },
            properties = new
            {
                popupContent = branch.ConsignacionName,
                iconUrl = branch.ActiveSessionId == null ? "bl_ico.png" : "def_ico.png" // Dynamic icon based on ActiveSessionId
            }
        }).ToList();

        var geojsonFeature = new
        {
            type = "FeatureCollection",
            features = features
        };

        await JSRuntime.InvokeVoidAsync("initMap", geojsonFeature);
    }
}
