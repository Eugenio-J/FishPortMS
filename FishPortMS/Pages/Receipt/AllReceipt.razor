@page "/all-receipt"
@inject NavigationManager NavigationManager
@inject IClientReceiptService ClientReceiptService
@inject IDialogService DialogService
@inject ILocalStorageService LocalStorageService
@inject IJSRuntime JavaScript


@if (loadingProgress)
{
    <TableSkeletonLoading />
}
else
{
    <div Class="pa-sm-10 pa-5">

        <HeaderBreadcrumps header_items="header_items" header_title="Receipt" AddIsActive="2" add_btn_title="Add Receipt" OnClick="CreateReceipt" />

        <PaginatedTable RowsPerPageChanged="HandleRowsPerPageChangedInRazor"
                        SearchBar="HandleSearchTextValue"
                        Paginated="HandlePaginatedBtn"
                        TotalItems="@TotalItems"
                        tableLoading="tableLoading"
                        THCount="10"
                        Title="RECEIPT"
                        Items="GetMasterProducts"
                        Context="receipt"
                        ID="table">

            <TableHeader>
                <th class="text-center">ID</th>
                <th class="text-center">Date</th>
                <th class="text-center">BS</th>
                <th class="text-center">Casher</th>
                <th class="text-center">Porsyento</th>
                <th class="text-center">Gross</th>
                <th class="text-center">Net</th> 
                <th></th>
            </TableHeader>
            <RowTemplate>
                <td data-title="Id" class="py-sm-5 py-3 text-end text-sm-center">@receipt.Id</td>
                <td data-title="Date" class="py-sm-5 py-3 text-end text-sm-center">@receipt.DateCreated.ToString("MMMM d, yyyy")</td>
                <td data-title="BS name" class="py-sm-5 py-3 text-end text-sm-center">@receipt.BSName</td>
                <td data-title="Cashier" class="py-sm-5 py-3 text-end text-sm-center">@receipt.CashierName</td>
                <td data-title="Porsyento" class="py-sm-5 py-3 text-end text-sm-center">@receipt.DeductedPercentage</td>
                <td data-title="Gross" class="py-sm-5 py-3 text-end text-sm-center">@receipt.GrossSales</td>
                <td data-title="Net" class="py-sm-5 py-3 text-end text-sm-center">@receipt.NetSales</td>
                <td>
                    <IconButton 
                        className="view-btn mr-2"
                        icon="@Icons.Material.Filled.RemoveRedEye"
                        OnClick="() => ViewReceipt(receipt.Id)"
                        tooltip="View Receipt"/>
                    <AuthorizeView Roles="CASHIER, CONSIGNACION_OWNER, SUPERUSER">
                        <Authorized>
                            <IconButton 
                                className="edit-btn mr-2"
                                icon="@Icons.Material.Filled.Edit"
                                OnClick="() => EditReceipt(receipt.Id)"
                                tooltip="Edit Receipt" />
                                </Authorized>
                    </AuthorizeView>
                </td>
            </RowTemplate>

        </PaginatedTable>

    </div>
}

@code {

    private int RowsPerPage { get; set; } = 10;
    public string TextValue { get; set; } = string.Empty;
    private int TotalItems { get; set; } = 0;
    private GetPaginatedDTO Paginated = new GetPaginatedDTO();
    private List<GetReceiptDTO> GetMasterProducts = new List<GetReceiptDTO>();
    private string selectedBranch = string.Empty;
    private bool loadingProgress = true;
    private bool tableLoading = true;

    protected override async Task OnInitializedAsync()
    {
        loadingProgress = true;
        tableLoading = true;
        PaginatedTableResponse<GetReceiptDTO> response = await ClientReceiptService.GetAllReceiptPaginated(Paginated);
        TotalItems = response.Count;
        GetMasterProducts = response.ResponseData;
        await JavaScript.InvokeVoidAsync("TablePaginate");
        loadingProgress = false;
        tableLoading = false;
    }

    private List<BreadcrumbItem> header_items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Receipts", href: "#", disabled: true),
        new BreadcrumbItem("Manage", href: "/all-receipts"),
    };

    private void CreateReceipt()
    {
        NavigationManager.NavigateTo("single-receipt");
    }
     
    private void ViewReceipt(int Id)
    {
        NavigationManager.NavigateTo($"view-receipt/{Id}");
    }

    private void EditReceipt(int Id)
    {
        NavigationManager.NavigateTo($"single-receipt/{Id}");
    }

    private async void HandleRowsPerPageChangedInRazor(TableStates state)
    {
        tableLoading = true;
        RowsPerPage = state.PageSize;
        Paginated.Skip = state.Page * state.PageSize;
        Paginated.Take = state.PageSize;
        PaginatedTableResponse<GetReceiptDTO> response = await ClientReceiptService.GetAllReceiptPaginated(Paginated);
        TotalItems = response.Count;
        GetMasterProducts = response.ResponseData;
        tableLoading = false;
        StateHasChanged();
    }

    private async void HandleSearchTextValue(string textValue)
    {   
        if (!string.IsNullOrWhiteSpace(textValue))
        {
            tableLoading = true;
            Paginated.SearchValue = textValue;
            PaginatedTableResponse<GetReceiptDTO> response = await ClientReceiptService.SearchReceipt(Paginated);
            TotalItems = response.Count;
            GetMasterProducts = response.ResponseData;
            tableLoading = false;
            StateHasChanged();
        }
        else
        {
            tableLoading = true;
            Paginated.Skip = 0;
            Paginated.Take = RowsPerPage;
            PaginatedTableResponse<GetReceiptDTO> response = await ClientReceiptService.GetAllReceiptPaginated(Paginated);
            TotalItems = response.Count;
            GetMasterProducts = response.ResponseData;
            tableLoading = false;
            StateHasChanged();
        }
    }

    private async void HandlePaginatedBtn(TableStates state)
    {
        tableLoading = true;
        Paginated.Skip = state.Page * state.PageSize;
        Paginated.Take = state.PageSize;
        PaginatedTableResponse<GetReceiptDTO> response = await ClientReceiptService.GetAllReceiptPaginated(Paginated);
        TotalItems = response.Count;
        GetMasterProducts = response.ResponseData;
        tableLoading = false;
        StateHasChanged();
    }

}
