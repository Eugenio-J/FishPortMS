@page "/view-receipt"
@page "/view-receipt/{Id:int}"
@using FishPortMS.Pages.Expense.Vendor
@using FishPortMS.Pages.Receipt.Component
@inject IClientReceiptService ClientReceiptService
@inject IClientVendorExpenseService ClientVendorExpenseService
@inject ModifiedSnackBar ModifiedSnackBar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IJSRuntime JavaScript

<style>

    .order-add-btn {
        font-family: 'Poppins' !important;
        background: #ff9419 !important;
        color: white !important;
        font-weight: 500 !important;
        font-size: 12px !important;
        border-radius: 10px;
        transition: .3s ease;
    }

        .order-add-btn:hover {
            background: #EA8817 !important;
            color: white !important;
        }
</style>

@if (loadingProgress)
{
    <TableSkeletonLoading />
}
else
{
    <div class="px-7">
        <HeaderBreadcrumps header_items="_items" header_title="View Receipt" />
    </div>

    <PrintButton OnClick="OnCloseButton" />

    <div class="position-relative mx-2 mx-sm-7 my-2 my-sm-10" style="border: solid 1px #3362a7 ">

        <div class="d-flex align-items-center justify-content-between" style="width: 100% !important; background: #3362a7; height: 40px; ">
            <MudText Class="ml-2" Style="font-size: 20px !important; color: white !important; letter-spacing: 1px;">
                PAGADO
            </MudText>

            <MudText Typo="Typo.subtitle2" Style="font-size: 20px !important; color: white !important; letter-spacing: 1px;" Class="mr-2">
                Date Created: @CreateReceipt.DateCreated?.ToString("MMMM d, yyyy")
            </MudText>

        </div>

        <div class="mx-2 mx-sm-0 px-2 px-sm-4 pb-4">
                <div class="d-flex flex-column mx-1 mx-sm-2">
                    <MudText Typo="Typo.subtitle2" Class="input-label mb-2 mt-5">Notes</MudText>
                    <MudTextField 
                        Class="mb-5"
                        Lines="5"
                        HelperText="Utang, Kulang, Hulog..."
                        @bind-Value="CreateReceipt.Notes"
                        InputType="InputType.Text"
                        Variant="Variant.Outlined"
                        Margin="Margin.Dense" 
                        ReadOnly />

                    <MudText Typo="Typo.subtitle2" Class="input-label mb-2">Buy and Sell Name</MudText>
                    <MudTextField
                        Class="mb-5"
                        @bind-Value="CreateReceipt.BSname"
                        InputType="InputType.Text"
                        Variant="Variant.Outlined"
                        Margin="Margin.Dense"
                        ReadOnly />

                    <MudText Typo="Typo.subtitle2" Class="input-label mb-2">Cashier</MudText>

                    <MudTextField 
                        Class="mb-5"
                        @bind-Value="CreateReceipt.CashierName"
                        InputType="InputType.Text"
                        Variant="Variant.Outlined"
                        Margin="Margin.Dense" 
                        ReadOnly />


                    <MudText Typo="Typo.subtitle2" Class="input-label mb-2">Percentage</MudText>

                    <MudTextField 
                        Class="mb-5"
                        @bind-Value="CreateReceipt.DeductedPercentage"
                        InputType="InputType.Number"
                        Variant="Variant.Outlined"
                        Margin="Margin.Dense" 
                        ReadOnly />

                </div>

              <AuthorizeView Roles="BUY_AND_SELL">
                  <Authorized>
                    <MudCheckBox Class="d-flex justify-content-end" @bind-Value="isAddExpense">Add Expense</MudCheckBox>
                  </Authorized>
              </AuthorizeView>

             @if (isAddExpense)
            {
                <div class="d-flex align-items-center">
                    <MudTextField   
                        Class="mr-1"
                        @bind-Value="NewVendorExp.Amount"
                        InputType="InputType.Number"
                        Variant="Variant.Outlined"
                        Margin="Margin.Dense" />

                    <MudSelect Class="mr-1" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="NewVendorExp.VendorExpenseCategoryId">
                        @foreach (var exp in ExpenseCategories)
                        {
                            <MudSelectItem Value="@exp.Id">@exp.Title</MudSelectItem>
                        }
                    </MudSelect>

                    <IconButton 
                        icon="@Icons.Material.Outlined.Add"
                        button_name="Add Expense"
                        className="submit-btn"
                        OnClick="() => AddExpense(Id)" />

                </div>
            }

            @if (CreateReceipt.VendorExpenses.Any())
            {
                <MudText Typo="Typo.subtitle2" Class="input-label mb-2">Expense</MudText>

                <MudTable
                    Items="@CreateReceipt.VendorExpenses"
                    Dense="true"
                    Hover="true"
                    Breakpoint="Breakpoint.None"
                    Style="padding-bottom: 0px;"
                    CellClass="text-center"
                    LoadingProgressColor="Color.Info">

                    <HeaderContent>
                        <MudTh Class="text-center">Amount</MudTh>
                        <MudTh Class="text-center">Category</MudTh>
                        <MudTh Class="text-center"></MudTh>
                    </HeaderContent>

                    <RowTemplate Context="expense">
                        <MudTd DataLabel="Amount" Class="text-center">P @string.Format("{0:N0}", expense.Amount)</MudTd>
                        <MudTd DataLabel="Category" Class="text-center">@categoryName[expense.VendorExpenseCategoryId] </MudTd>
                        <AuthorizeView Roles="BUY_AND_SELL">
                            <Authorized>
                                <MudTd>
                                    <IconButton 
                                        icon="@Icons.Material.Outlined.Edit"
                                        className="edit-btn"
                                        tooltip="Edit"
                                        OnClick="() => UpdateExpense(expense)" />

                                    <IconButton 
                                        icon="@Icons.Material.Outlined.Delete"
                                        className="remove-btn"
                                        tooltip="Delete"
                                        OnClick="() => DeleteExpense(expense.Id)" />
                                </MudTd>
                            </Authorized>
                        </AuthorizeView>
                  
                    </RowTemplate>
                </MudTable>
            }

            @if (isExpenseAdded)
            {
                <SubmitButton 
                    button_name="Add Expense"
                    className="submit-btn w-100 mb-5 mt-n5"
                    OnClick="() => AddVendorExpense()" />
            }

            @if (_tabs.Any())
            {
                <MudPaper Class="pa-2">
                    <MudTabs @bind-ActivePanelIndex="_activeTabIndex">
                        @foreach (var tab in _tabs)
                        {
                            decimal totalAmount = 0;

                            foreach (var item in tab.POItemsList)
                            {
                                totalAmount += item.CurrentPrice * item.Weight;
                            }

                            <MudTabPanel Text="@tab.Title">
                                <MudTable Items="@tab.POItemsList" Dense="true" Hover="true" Breakpoint="Breakpoint.None" Style="padding-bottom: 0px;" CellClass="text-center" LoadingProgressColor="Color.Info">
                                    <HeaderContent>
                                        <MudTh Class="text-center">Kilo</MudTh>
                                        <MudTh Class="text-center">Price/Kilo</MudTh>
                                        <MudTh Class="text-center">Subtotal</MudTh>
                                    </HeaderContent>

                                    <RowTemplate Context="orders">
                                        <MudTd DataLabel="Kilo" Class="text-center">@orders.Weight</MudTd>
                                        <MudTd DataLabel="Price" Class="text-center">P @string.Format("{0:N0}", orders.CurrentPrice)</MudTd>
                                        <MudTd DataLabel="Subtotal" Class="text-center">P @string.Format("{0:N0}", orders.CurrentPrice * @orders.Weight)</MudTd>
                                    </RowTemplate>
                                    <FooterContent>
                                        <MudTFootRow Class="bold-text text-end">
                                            <MudTd>Total Kilo: P @string.Format("{0:N2}", tab.POItemsList.Sum(x => x.Weight))</MudTd>
                                            <MudTd>Total Benta: P @string.Format("{0:N2}", tab.POItemsList.Sum(x => x.Subtotal))</MudTd>
                                            <MudTd>Total %: P @string.Format("{0:N2}", (tab.POItemsList.Sum(x => x.Subtotal) * (@CreateReceipt.DeductedPercentage / 100)))</MudTd>
                                        </MudTFootRow>
                                    </FooterContent>
                                    <PagerContent>
                                        <MudTablePager
                                            HorizontalAlignment="HorizontalAlignment.Center"
                                            HideRowsPerPage="true"/>
                                    </PagerContent>
                                </MudTable>
                            </MudTabPanel>
                        }
                    </MudTabs>
                </MudPaper>
            }

            else
            {
                <div class="text-center pt-3 pb-5 px-4 mb-3 order-list" style="border: 1px solid #E0EAF7; border-radius: 8px; background: #FAFAFA;">
                    <MudText Typo="Typo.h4" Class="mr-1 mt-2" Style="font-family: 'Poppins' !important; font-size: 14px!important; margin-top: 10px!important; text-transform: uppercase; font-weight: 400!important;">
                        NO ORDERS FOUND.
                    </MudText>
                </div>
            }

            <SalesBreakdown Summary="ReceiptSummaryDTO" />

        </div>
    </div>

    <PrintableReceipt ReceiptSummaryDTO="@ReceiptSummaryDTO" Receipt="@CreateReceipt" categoryName="@categoryName" />
}

@code {

    [Parameter] public int? Id { get; set; }
    public bool isLoading { get; set; } = false;
    public CreateReceiptDTO CreateReceipt { get; set; }
    public GetReceiptDTO? GetReceipt { get; set; }
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>();
    private bool loadingProgress = true;
    private int _tabCounter = 1;
    private int _activeTabIndex = 0;
    public ReceiptSummaryDTO ReceiptSummaryDTO { get; set; } = new ReceiptSummaryDTO();
    private bool isAddExpense = false;
    private bool isExpenseAdded = false;
    private List<Tabs> _tabs = new List<Tabs>();
    public AddVendorExp AddVendorExp { get; set; } = new AddVendorExp();
    public CreateVendorExp NewVendorExp { get; set; } = new CreateVendorExp();
    public UpdateVendorExp UpdateVendorExp { get; set; } = new UpdateVendorExp();
    private List<GetExpenseCategory> ExpenseCategories = new List<GetExpenseCategory>();
    private Dictionary<int, string> categoryName = new Dictionary<int, string>();

    protected override async Task OnParametersSetAsync()
    {
        await JavaScript.InvokeVoidAsync("print_pdf");

        ExpenseCategories = await ClientVendorExpenseService.GetCategoryList();

        foreach (var category in ExpenseCategories)
        {
            categoryName[category.Id] = category.Title;
        }

        _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("RECEIPT", href: "/all-receipt"),
            new BreadcrumbItem("View Receipt", href: "#", disabled: true),
        };

        loadingProgress = true;

        if (Id == null)
        {
            CreateReceipt = new CreateReceiptDTO();
        }

        else
        {
            await LoadReceipt();
        }

        loadingProgress = false;
    }

    private void OnCloseButton()
    {
        NavigationManager.NavigateTo("all-receipt");
    }

    private async Task LoadReceipt()
    {
        GetReceipt = await ClientReceiptService.GetSingleReceipt((int)Id);

        if (GetReceipt != null)
        {
            CreateReceipt = new CreateReceiptDTO
                {
                    BSname = GetReceipt.BSName,
                    CashierName = GetReceipt.CashierName,
                    DeductedPercentage = GetReceipt.DeductedPercentage,
                    Notes = GetReceipt.Notes,
                    GetReceiptItemDTO = GetReceipt.ReceiptItems,
                    VendorExpenses = GetReceipt.VendorExpenses,
                    DateCreated = GetReceipt.DateCreated
                };
        }

        foreach (var item in CreateReceipt.GetReceiptItemDTO)
        {
            if (!_tabs.Any(x => x.Title == item.ProductName))
            {
                var newTab = new Tabs
                {
                    Title = item.ProductName,
                    POItemsList = new List<GetReceiptItemDTO>()
                };

                newTab.POItemsList.Add(item);
                _tabs.Add(newTab);
            }
            else
            {
                var selectedTab = _tabs.FirstOrDefault(x => x.Title == item.ProductName);

                selectedTab.POItemsList.Add(item);
            }
        }

        var expenseAmount = GetReceipt.VendorExpenses == null ? 0 : GetReceipt.VendorExpenses.Sum(x => x.Amount);

        ReceiptSummaryDTO = new ReceiptSummaryDTO
        {
            GrossSales = GetReceipt.GrossSales,
            NetSales = GetReceipt.NetSales - expenseAmount,
            DeductedPercentage = GetReceipt.DeductedPercentage,
            DeductedAmount = GetReceipt.DeductedAmount,
            ExpenseAmount = expenseAmount
        };

        StateHasChanged();
    }

    private void AddExpense(int? Id)
    {
        AddVendorExp.ReceiptId = (int)Id;

        if (NewVendorExp.Amount <= 0) 
        {
            ModifiedSnackBar.ShowMessage("Invalid amount.", Severity.Warning);
            return;
        }

        if (NewVendorExp.VendorExpenseCategoryId == 0)
        {
            ModifiedSnackBar.ShowMessage("Select expense category.", Severity.Warning);
            return;
        }

        if (CreateReceipt.VendorExpenses.Any(x => x.VendorExpenseCategoryId == NewVendorExp.VendorExpenseCategoryId)) 
        {
            ModifiedSnackBar.ShowMessage($"{categoryName[NewVendorExp.VendorExpenseCategoryId]} expense is existing already.", Severity.Warning);
            return;
        }

        AddVendorExp.VendorExpenses.Add(NewVendorExp);
        CreateReceipt.VendorExpenses.Add(new GetVendorExp
        {
            Amount = NewVendorExp.Amount,
            VendorExpenseCategoryId = NewVendorExp.VendorExpenseCategoryId
        });
        NewVendorExp = new CreateVendorExp();
        isExpenseAdded = true;
    }

    private async Task AddVendorExpense()
    {
        if (!AddVendorExp.VendorExpenses.Any()) 
        {
            ModifiedSnackBar.ShowMessage("Please add expense", Severity.Warning); 
            return;
        }

        int result = await ClientVendorExpenseService.AddExpense(AddVendorExp);
    }

    private async Task DeleteExpense(int expenseId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure you want to delete this expense");
        parameters.Add("ButtonText", "Yes");
        parameters.Add("Color", Color.Success);
        var dialog = await DialogService.Show<ApprovalDialog>("Delete expense", parameters).Result;
        if (dialog.Data != null && dialog.Data is bool confirmed && confirmed)
        {
            await ClientVendorExpenseService.DeleteExpense(expenseId);
            await LoadReceipt();
        }
    }

    private async Task UpdateExpense(GetVendorExp expense)
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", expense.Id);
        parameters.Add("singleExpense", expense);
        parameters.Add("ExpenseCategories", ExpenseCategories);
        parameters.Add("CreateReceipt", CreateReceipt);
        parameters.Add("categoryName", categoryName);

        var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, CloseButton = true };
        var dialog = await DialogService.Show<SingleVendorExpense>("", parameters, options).Result;
        if (dialog.Data != null && dialog.Data is UpdateVendorExp updateExpense) 
        {
            await ClientVendorExpenseService.UpdateExpense(updateExpense);
            await LoadReceipt();
        }

    }
}
