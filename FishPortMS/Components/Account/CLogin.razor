@using System.Security.Claims;

@inject IClientAccountService ClientAuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JavaScript
@inject NavigationManager NavigationManager
@inject ModifiedSnackBar ModifiedSnackBar

<EditForm Model="loginDTO" style="z-index: 5" OnValidSubmit="Login">

    <div class="py-3 px-sm-10 px-5 mt-n6">
        
        <MudTextField @bind-Value="loginDTO.Email"
            Label="Email"
            Placeholder="example@email.com"
            Clearable AutoFocus 
            Margin="Margin.Dense" 
            InputType="InputType.Email" 
            Variant="Variant.Outlined"
            Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Outlined.Email" />
    </div>

    <div class="py-3 px-sm-10 px-5">
        <MudTextField @bind-Value="loginDTO.Password"
            Label="Password"
            Placeholder="e.g., ********"
            Style="padding-bottom: 3px!important;"
            Variant="Variant.Outlined" 
            InputType="@PasswordInput" 
            Margin="Margin.Dense" 
            Adornment="Adornment.End" 
            AdornmentIcon="@PasswordInputIcon" 
            OnAdornmentClick="ShowPassword"/>
    </div>
    <div class="py-3 px-sm-10 px-5 ml-n3 mt-n5">
        <MudCheckBox @bind-Checked="@Label_CheckBox2" Color="Color.Primary" Size="Size.Small" Class="rem-pass-text">Remember password?</MudCheckBox>
    </div>
    <div class="pt-3 pb-0 px-sm-10 px-5 mt-0">
        <AuthButton 
            css="background-color: #101642; color: white!important; border-radius: 10px;" 
            className="btn-submit w-100"
            button_name="SIGN IN"
            isLoading="isLoading" />
        <div class="text-center d-flex flex-column mt-4">
            <MudLink Href="/forgot-password" Style="color: #A3B2C2!important;font-weight: 400!important;">Forgot your password?</MudLink>
        </div>
    </div>
</EditForm>

@code{

    private LoginDTO loginDTO = new LoginDTO();

    public bool Label_CheckBox2 { get; set; } = false;

    private bool isLoading = false;

    public string Password { get; set; } = string.Empty;
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async void Login() {

        isLoading = true;

        var response = await ClientAuthService.LoginAsync(loginDTO);

        if (response == "success")
        {
            var auth_state = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = auth_state.User;
            var roleClaim = user.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.Role);
            var role = roleClaim?.Value;

            isLoading = false;

            if (role == Roles.SUPERUSER.ToString() 
                || role == Roles.ADMIN.ToString()
                || role == Roles.ADMIN_ASST.ToString())
            {
                isLoading = false;
                StateHasChanged();
                NavigationManager.NavigateTo("/dashboard");
            }
        }
        else
        {
            isLoading = false;
            StateHasChanged();
            ModifiedSnackBar.ShowMessage("Invalid Credentials.", Severity.Warning);
            return;
        }
    }

    void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}