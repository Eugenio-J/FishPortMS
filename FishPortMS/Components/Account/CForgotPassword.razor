@inject IClientAccountService ClientAccountService

<EditForm Model="ForgotPassword" OnValidSubmit="ForgotPass">
    <DataAnnotationsValidator />

    <label for="password" class="d-flex">New Password <span class="ml-1" style="color: #FF4F53;">*</span></label>
    <MudTextField @bind-Value="ForgotPassword.NewPassword"
                  For="@(() => ForgotPassword.NewPassword)"
                  Placeholder="******"
                  Variant="Variant.Outlined"
                  InputType="@PasswordInput"
                  Margin="Margin.Dense"
                  Adornment="Adornment.End"
                  Class="w-100 mb-5"
                  Style="margin-top: -3px;"
                  AdornmentIcon="@PasswordInputIcon"
                  OnAdornmentClick="ShowPassword" />


    <label for="confirmpass" class="d-flex">Confirm Password <span class="ml-1" style="color: #FF4F53;">*</span></label>
    <MudTextField @bind-Value="ForgotPassword.ConfirmPassword"
                  For="@(() => ForgotPassword.ConfirmPassword)"
                  Placeholder="******"
                  Variant="Variant.Outlined"
                  InputType="@ConfirmPasswordInput"
                  Margin="Margin.Dense"
                  Adornment="Adornment.End"
                  Class="w-100 mb-5"
                  Style="margin-top: -3px;"
                  AdornmentIcon="@ConfirmPasswordInputIcon"
                  OnAdornmentClick="ShowConfirmPassword" />

    <label for="confirmpass" class="d-flex">Confirm Password <span class="ml-1" style="color: #FF4F53;">*</span></label>
    <MudTextField @bind-Value="ForgotPassword.ConfirmPassword"
                  For="@(() => ForgotPassword.ConfirmPassword)"
                  Placeholder="******"
                  Variant="Variant.Outlined"
                  InputType="@ConfirmPasswordInput"
                  Margin="Margin.Dense"
                  Adornment="Adornment.End"
                  Class="w-100 mb-5"
                  Style="margin-top: -3px;"
                  AdornmentIcon="@ConfirmPasswordInputIcon"
                  OnAdornmentClick="ShowConfirmPassword" />

    <div class="options">
        <div></div>
        <a href="/login">Back To Login</a>
    </div>


    <AuthButton className="primary-btn w-100"
                css="font-size: 13px !important"
                button_name="SUBMIT"
                isLoading="IsLoading" />
</EditForm>


@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    private bool IsLoading = false;
    private ForgotPasswordDTO ForgotPassword { get; set; } = new();

    // [CascadingParameter]
    // public VerifyCodeDTO VerificationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // ForgotPassword.Email = VerificationState.Email;
        // ForgotPassword.Code = VerificationState.Code;
    }

    //PASS SHOW
    bool isShow = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    //CONFIRM PASS SHOW
    bool isConfirmShow = false;
    InputType ConfirmPasswordInput = InputType.Password;
    string ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    public bool Label_CheckBox2 { get; set; } = false;

    void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    void ShowConfirmPassword()
    {
        @if (isConfirmShow)
        {
            isConfirmShow = false;
            ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            ConfirmPasswordInput = InputType.Password;
        }
        else
        {
            isConfirmShow = true;
            ConfirmPasswordInputIcon = Icons.Material.Filled.Visibility;
            ConfirmPasswordInput = InputType.Text;
        }
    }

    private async Task ForgotPass()
    {
        IsLoading = true;
        var response = await ClientAccountService.ForgotPass(ForgotPassword);
        IsLoading = false;
    }

}